/*
 * This is the appa mini-game
 * In this mini-game, the user controls appa and must dodge the falling boulders by moving left or right
 * The user must survive from the boulders for 60 seconds to win, but beware, the # of tiles as well as speed will increase as time progresses
 * If appa gets hit by any boulders, the game will end
 */
package appagame;

import javax.swing.*; //Import all javax swing modules
import java.awt.*;//Import all java awt modules
import static java.lang.Thread.sleep; //Import sleep method
import java.util.*; ////Import all java utils
import java.io.*; //Import all java.io modules
import javax.sound.sampled.*; //import all javax.sound.sampled modules

/**
 *
 * @author geoffreylee
 */
public class appa extends javax.swing.JPanel {
    ImageIcon person = new ImageIcon("person.jpeg"); //create person icon and store into variable person
    ImageIcon blank = new ImageIcon("white.png");  //create blank image icon and store into variable blank
    ImageIcon rock = new ImageIcon("rock.jpeg");  //create boulder icon and store into variable rock
    ImageIcon mountain = new ImageIcon("rockfall.jpg"); //create rock falling icon and store into variable mountain
    ImageIcon gameOver = new ImageIcon("dead.jpeg");  //create dead person icon and store into variable gameOver
    ArrayList<Integer> boulderLocation = new ArrayList<Integer>(); //Intialize boulderLocaiton arrayList to hold type Integer
    static int miliseconds = 0; //Intialize static variable miliseconds to 0
    static int seconds = 0; //Intialize static variable seconds to 0
    static int minutes = 0; //Intialize static variable minutes to 0
    static boolean state = true; //Intialize static boolean variable state to true which will serve as a tool to determine whether the game still continues
    
    
    /**
     * Creates new form appa
     */
    public appa() {
        this.setBackground(Color.orange); //set background color to orange
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        one = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        ten = new javax.swing.JButton();
        eleven = new javax.swing.JButton();
        tweleve = new javax.swing.JButton();
        fourteen = new javax.swing.JButton();
        thirteen = new javax.swing.JButton();
        fifteen = new javax.swing.JButton();
        sixteen = new javax.swing.JButton();
        four = new javax.swing.JButton();
        twenty = new javax.swing.JButton();
        eightteen = new javax.swing.JButton();
        nineteen = new javax.swing.JButton();
        seventeen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        minute = new javax.swing.JLabel();
        second = new javax.swing.JLabel();
        milisecond = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        display = new javax.swing.JTextField();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        status = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        helpBox = new javax.swing.JLabel();
        helpBox2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        eight.setBackground(new java.awt.Color(0, 255, 51));

        twenty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twentyActionPerformed(evt);
            }
        });

        eightteen.setIcon(new javax.swing.ImageIcon("/Users/geoffreylee/NetBeansProjects/appaGame/istockphoto-1223296023-640x640.jpeg")); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 204));
        jLabel1.setText("Boulder game");

        jButton21.setText("Play");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jLabel3.setText("Timer");

        minute.setText("00:");

        second.setText("00:");

        milisecond.setText("00");

        jLabel7.setText("Qualification");

        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        jButton22.setText("Right");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Left");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setText("Exit");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jLabel4.setText("Status");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 153));
        jLabel8.setText("It will slowly Ramp up in pace");

        jButton1.setText("Help");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(255, 51, 153));
        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 51));
        jLabel9.setText("Survive 1 Minute!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(eleven, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(tweleve, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sixteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(seventeen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eightteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(thirteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton21))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton23)
                        .addGap(85, 85, 85)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(fourteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(fifteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ten, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nineteen, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(twenty, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton22))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton24, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jButton1)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(display))))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(helpBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                    .addComponent(helpBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jLabel9)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabel3)
                .addGap(9, 9, 9)
                .addComponent(minute)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(second)
                        .addGap(18, 18, 18)
                        .addComponent(milisecond)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(20, 20, 20)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton21)
                            .addComponent(jLabel3)
                            .addComponent(minute)
                            .addComponent(second)
                            .addComponent(milisecond))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(two, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(four, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ten, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(helpBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton24))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eleven, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tweleve, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(thirteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sixteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(seventeen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eightteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fourteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fifteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(twenty, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nineteen, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton22)
                            .addComponent(jButton23))
                        .addGap(0, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sevenActionPerformed

    private void twentyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twentyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twentyActionPerformed
    public static int randomInteger(int min, int max) { //This function generates a random number from nin to max and was inspired by Charith Jaysanka from StackOverFlow
         //Create random object
        Random rand = new Random();
        //get random number from min to max and store value into variable randomNun
        int randomNum = rand.nextInt((max - min) + 1) + min;
        //return randomNum
        return randomNum;
    }
    public void placeBoulder() { //This function gets a random number using the random function and places a boulder at a random position from 1-5
        int num = randomInteger(1,5); //Get random number from 1-5 using randomInteger function and assign value to variable num
        switch (num) { //Use switch case with num passed in 
            case 1: //If num equals 1
                one.setIcon(rock); //set the first image icon to boulder
                break; //Break out of switch case
            case 2: //If num equals 2
                two.setIcon(rock); //set the second image icon to boulder
                break; //Break out of switch case
            case 3: //If num equals 3
                three.setIcon(rock); //set the third image icon to boulder
                break; //Break out of switch case
            case 4: //If num equals 4
                four.setIcon(rock); //set the fourth image icon to boulder
                break; //Break out of switch case
            case 5: //If num equals 5
                five.setIcon(rock); //set the fifth image icon to boulder
                break; //Break out of switch case
        }
    }
    public ArrayList<Integer> findBoulderLocations() { //This function determines the location of the boulders
        ArrayList<Integer> boulderLocations = new ArrayList<Integer>(); //Intialize arrayList boulderLocations 
        if (one.getIcon().toString().equals("rock.jpeg")) { //Check if the first icon equals the boulder by checking if the icon address equals rock.jpeg
            boulderLocations.add(1); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (two.getIcon().toString().equals("rock.jpeg")) { //Check if the second icon had a boulder
            boulderLocations.add(2); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }

        if (three.getIcon().toString().equals("rock.jpeg")) { //Check if the third icon had a boulder
            boulderLocations.add(3); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (four.getIcon().toString().equals("rock.jpeg")) { //Check if the fourth icon had a boulder
            boulderLocations.add(4); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (five.getIcon().toString().equals("rock.jpeg")) { //Check if the fifth icon had a boulder
            boulderLocations.add(5); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (six.getIcon().toString().equals("rock.jpeg")) { //Check if the sixth icon had a boulder
            boulderLocations.add(6); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (seven.getIcon().toString().equals("rock.jpeg")) { //Check if the seveneth icon had a boulder
            boulderLocations.add(7); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (eight.getIcon().toString().equals("rock.jpeg")) { //Check if the eighth icon had a boulder
            boulderLocations.add(8); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (nine.getIcon().toString().equals("rock.jpeg")) { //Check if the ninth icon had a boulder
            boulderLocations.add(9); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (ten.getIcon().toString().equals("rock.jpeg")) { //Check if the tenth icon had a boulder
            boulderLocations.add(10); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (eleven.getIcon().toString().equals("rock.jpeg")) { //Check if the eleventh icon had a boulder
            boulderLocations.add(11); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (tweleve.getIcon().toString().equals("rock.jpeg")) { //Check if the tweleveth icon had a boulder
            boulderLocations.add(12); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (thirteen.getIcon().toString().equals("rock.jpeg")) { //Check if the thirteenth icon had a boulder
            boulderLocations.add(13); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (fourteen.getIcon().toString().equals("rock.jpeg")) { //Check if the fourteenth icon had a boulder
            boulderLocations.add(14); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (fifteen.getIcon().toString().equals("rock.jpeg")) { //Check if the fifteenth icon had a boulder
            boulderLocations.add(15); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (sixteen.getIcon().toString().equals("rock.jpeg")) { //Check if the sixteenth icon had a boulder
            boulderLocations.add(16); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (seventeen.getIcon().toString().equals("rock.jpeg")) { //Check if the seventeenth icon had a boulder
            boulderLocations.add(17); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (eightteen.getIcon().toString().equals("rock.jpeg")) { //Check if the eightteenth icon had a boulder
            boulderLocations.add(18);//If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (nineteen.getIcon().toString().equals("rock.jpeg")) { //Check if the nineteenth icon had a boulder
            boulderLocations.add(19); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }
        if (twenty.getIcon().toString().equals("rock.jpeg")) { //Check if the twentyth icon had a boulder
            boulderLocations.add(20); //If the image is a rock, add the number to the arrayList notifying that the first image has a boulder
        }  
        //return the arrayList boulderLocations which contains all the indexes of images that contain boulders
        return boulderLocations;
    }
    public void moveBoulders(ArrayList<Integer> boulderLocations) { //This function move the boulders down a tile
        for (int num: boulderLocation) { //Loop through all numbers which contain images that have boulders
            switch (num) { //Switch case with each number in arrayList passed in
                case 1: //If num equals 1
                    one.setIcon(blank); //set the first icon blank
                    six.setIcon(rock); //set the sixth icon to the boulder as it lises directly beneath
                    break;//break
                case 2: //If num equals 2
                    two.setIcon(blank); //set the second icon blank
                    seven.setIcon(rock);  //set the seventh icon to the boulder as it lises directly beneath
                    break;//break
                case 3: //If num equals 3
                    three.setIcon(blank);//set the third icon blank
                    eight.setIcon(rock);  //set the eighth icon to the boulder as it lises directly beneath
                    break;//break
                case 4: //If num equals 4
                    four.setIcon(blank); //set the foruth icon blank
                    nine.setIcon(rock);  //set the ninth icon to the boulder as it lises directly beneath
                    break;
                case 5: //If num equals 5
                    five.setIcon(blank); //set the fifthicon blank
                    ten.setIcon(rock);  //set the tenth icon to the boulder as it lises directly beneath
                    break;//break
                case 6: //If num equals 6
                    six.setIcon(blank); //set the sixth icon blank
                    eleven.setIcon(rock);  //set the eleventh icon to the boulder as it lises directly beneath
                    break;//break
                case 7: //If num equals 7
                    seven.setIcon(blank); //set the sveneth icon blank
                    tweleve.setIcon(rock);  //set the tweleth icon to the boulder as it lises directly beneath
                    break;//break
                case 8: //If num equals 8
                    eight.setIcon(blank); //set the eight icon blank
                    thirteen.setIcon(rock);  //set the thirdteenth icon to the boulder as it lises directly beneath
                    break;//break
                case 9://If num equals 9
                    nine.setIcon(blank); //set the ninth icon blank
                    fourteen.setIcon(rock);  //set the fourteenth icon to the boulder as it lises directly beneath
                    break;//break
                case 10: //If num equals 10
                    ten.setIcon(blank); //set the tenth icon blank
                    fifteen.setIcon(rock);  //set the fifteenth icon to the boulder as it lises directly beneath
                    break; //break
                case 11: //If num equals 11
                    eleven.setIcon(blank); //set the eleventh icon blank
                    if (sixteen.getIcon().toString().equals("person.jpeg")) { //Since the eleventh is one the 2nd last level, check if their lies a person directly beneath the tile
                        sixteen.setIcon(gameOver); //If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        state = false; //Set state to false signifying the end of the game
                        status.setText("Dead"); //set status to dead
                        display.setText("Game Over"); //set display to game over
                    }
                    else { //else if there isnt anyone below
                        sixteen.setIcon(rock); //set the beanth tile to rock
                    }
                    break; //break
                case 12: //If num equals 12
                    tweleve.setIcon(blank); //set tweleve to blank
                    if (seventeen.getIcon().toString().equals("person.jpeg")) {//check if their lies a person directly beneath the tile
                        seventeen.setIcon(gameOver); //If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        state = false; //Set state to false signifying the end of the game
                        status.setText("Dead"); //set status to dead
                        display.setText("Game Over"); //set display to game over
                    }
                    else {  //else if there isnt anyone below
                        seventeen.setIcon(rock); //set the beanth tile to rock
                    }
                    break;//break
                case 13://If num equals 13
                    thirteen.setIcon(blank);
                    if (eightteen.getIcon().toString().equals("person.jpeg")) { //check If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        eightteen.setIcon(gameOver); //check If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        state = false; //Set state to false signifying the end of the game
                        status.setText("Dead"); //set status to dead
                        display.setText("Game Over"); //set display to game over
                    }
                    else {  //else if there isnt anyone below
                        eightteen.setIcon(rock); //set the beanth tile to rock
                    }
                    break;//break
                case 14: //If num equals 14
                    fourteen.setIcon(blank);
                    if (nineteen.getIcon().toString().equals("person.jpeg")) { //check If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        nineteen.setIcon(gameOver); //If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        state = false; //Set state to false signifying the end of the game
                        status.setText("Dead"); //set status to dead
                        display.setText("Game Over"); //set display to game over
                    }
                    else {  //else if there isnt anyone below
                        nineteen.setIcon(rock); //set the beanth tile to rock
                    }
                    break; //break
                case 15: //If num equals 15
                    fifteen.setIcon(blank);
                    if (twenty.getIcon().toString().equals("person.jpeg")) { //check If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        twenty.setIcon(gameOver); //If there is a person below, since the tile would fall on the person, the game would end so set person with gameOver icon
                        state = false; //Set state to false signifying the end of the game
                        status.setText("Dead"); //set status to dead
                        display.setText("Game Over"); //set display to game over
                    }
                    else {  //else if there isnt anyone below
                        twenty.setIcon(rock); //set the beanth tile to rock
                    }
                    break;//break
                case 16: //If num equals 16
                    sixteen.setIcon(blank); //set icon blank since its the last level and the boulder disappears
                    break; //break
                case 17: //If num equals 17
                    seventeen.setIcon(blank); //set icon blank
                    break; //break
                case 18: //If num equals 18
                    eightteen.setIcon(blank); //set icon blank
                    break; //break
                case 19: //If num equals 19
                    nineteen.setIcon(blank); //set icon blank
                    break; //break
                case 20: //If num equals 20
                    twenty.setIcon(blank); //set icon blank
                    break; //break
            }
        }
    }
    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
        status.setText("Alive"); //set status to alive once the user clicks play
        //set every single icon to blank except for eightteenth which is where the user will start in the game
        one.setIcon(mountain);
        two.setIcon(mountain);
        three.setIcon(mountain);
        four.setIcon(mountain);
        five.setIcon(mountain);
        six.setIcon(blank);
        seven.setIcon(blank);
        eight.setIcon(blank);
        nine.setIcon(blank);
        ten.setIcon(blank);
        eleven.setIcon(blank);
        tweleve.setIcon(blank);
        thirteen.setIcon(blank);
        fourteen.setIcon(blank);
        fifteen.setIcon(blank);
        sixteen.setIcon(blank);
        seventeen.setIcon(blank);
        eightteen.setIcon(person);
        nineteen.setIcon(blank);
        twenty.setIcon(blank);
        //Intialize variables miliseconds seconds and minutes to 0
        miliseconds = 0;
        seconds = 0;
        minutes = 0;
        //intialize state to true
        state = true;
        //Create thread with time sleep class, this will be the stopwatch, this stopwatch was inspired by Coding Time on youtube
        Thread t = new Thread()
        {
            public void run() {  //Continously run
                for(;;) { //Infinteltly loop
                    if (state==true) { //Check if the game is still running by checking if state is true
                        try { //try
                            sleep(1); //sleep 1 milisecond
                            if (miliseconds >= 1000) { //if milseconds goes past 1000, set miliseconds to 0 and increment a second
                                miliseconds = 0; //set miliseconds to 0
                                seconds++; //increment second
                                if (seconds < 10) { //if seconds is less than 10 meaning its at beggining of the game
                                    placeBoulder(); //place one boulder using placeBoulder function
                                }
                                else if (seconds < 30) { //if seconds is less than 30 meaning its at middle of the game
                                    placeBoulder(); //place one boulder using placeBoulder function
                                    placeBoulder(); //place second boulder using placeBoulder function
                                }
                                else if (seconds < 45) { //if seconds is less than 45 meaning its near end of game
                                    placeBoulder(); //place boulder one
                                    placeBoulder(); //place boulder two
                                    placeBoulder();//place boulder three to ramp up the game
                                }
                                else { //else if its at last stages 45 seconds+
                                    placeBoulder();////place boulder one
                                    placeBoulder();//place boulder two
                                    placeBoulder();//place boulder three
                                    placeBoulder();//place boulder four
                                }
                                boulderLocation = findBoulderLocations(); //now use findBoulderLocations function which returns an arrayList of the positions of all boulders are assig the arraylist to boulderLocation variable
                                moveBoulders(boulderLocation); //use moveBoulders function to move all the boulders down each second
                            }
                         
                            if (seconds >= 60) {//once seconds reaches past 60
                                seconds = 0; //set seconds to 0
                                minutes++; //add one to minutes
                            }
                            //display the timer by setting the three labels to the corresponding times every milisecond
                            milisecond.setText(" : " + "" + miliseconds); 
                            second.setText(" : " + seconds);
                            minute.setText("" + minutes);
                            miliseconds++; //increment the miliseconds
                            if (minutes == 1) { //check if minute equals 1
                                state = false; //stop the game then by setting state to false
                                status.setText("Congrats!!!"); //since user survived minute, output congrats
                                display.setText("You Win!"); //output you win
                            }
                        }
                        catch (Exception e) { //ensure no errors pop up
                            
                        }
                        
                    }
                    else { //else break if the state is false
                        break; //break out loop
                    }
                }
            }
        };
        t.start(); //start timer
    }//GEN-LAST:event_jButton21ActionPerformed
    public int findUserLocation() { //This function finds the location of the user
        if (sixteen.getIcon().toString().equals("person.jpeg")) { //check if user lies in that tile by checking if the tiles address equals person.jpeg
            return 16;//if user lies there, return the number
        }
        else if (seventeen.getIcon().toString().equals("person.jpeg")) {//check if user lies in that tile
            return 17;//if user lies there, return the number
        }
        else if (eightteen.getIcon().toString().equals("person.jpeg")) {//check if user lies in that tile
            return 18;//if user lies there, return the number
        }
        else if (nineteen.getIcon().toString().equals("person.jpeg")) {//check if user lies in that tile
            return 19; //if user lies there, return the number
        }
        else { //else user must be in tile 20
            return 20;//if user lies there, return the number
        }
    }
    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
        System.exit(0);//exists program once exit button is clicked
    }//GEN-LAST:event_jButton24ActionPerformed
    
    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // TODO add your handling code here:
        try { //In case userPoistion is not found meaning user hasn't started game
            int userPosition = findUserLocation(); //once user clicks right button, get user location using findUserLocation function and assign the number to userPosition variable 
            switch (userPosition) { //use switch case and pass in userPoistion
                case 16: //If users at 16th
                    sixteen.setIcon(blank); //set 16th tile to blank
                    seventeen.setIcon(person); //set 17th to have user icon, shifting the user one place to the right
                    break; //break
                case 17: //If users at 17th
                    seventeen.setIcon(blank); //set 17th tile to blank
                    eightteen.setIcon(person); //set 18th to have user icon
                    break; //break
                case 18: //If users at 18th
                    eightteen.setIcon(blank); //set 18th tile to blank
                    nineteen.setIcon(person); //set 19th to have user icon
                    break; //break
                case 19: //If users at 19th
                    nineteen.setIcon(blank); //set 19th tile to blank
                    twenty.setIcon(person); //set 20th to have user icon
                    break; //break
                case 20: //If users at 20th
                    status.setText("Blocked"); //set status to blocked since the user cant move right at the last tile
                    break; //break 
            }
        }
        catch (NullPointerException e) { //ensure no null pointer errors pop up
            status.setText("Game not on"); //output game not started
        }
        
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        try { //In case userPoistion is not found meaning user hasn't started game
            int userPosition = findUserLocation(); //once user clicks left button, get user location using findUserLocation function and assign the number to userPosition variable 
            switch (userPosition) { //use switch case and pass in userPoistion
                case 16: //If users at 16th
                    status.setText("Blocked"); //set status blocked since user cant move left at bottom left tile
                    break; //break
                case 17: //If users at 17th
                    seventeen.setIcon(blank); //set seventtenth tile blank
                    sixteen.setIcon(person); //set sixteenth to person
                    break;//break
                case 18: //If users at 18th
                    eightteen.setIcon(blank); //set eighttenth tile blank
                    seventeen.setIcon(person); //set seventeenth to person
                    break;//break
                case 19: //If users at 19th
                    nineteen.setIcon(blank); //set nineteenth tile blank
                    eightteen.setIcon(person); //set eighteenth to person
                    break;//break
                case 20: //If users at 20th
                    twenty.setIcon(blank); //set twentyh tile blank
                    nineteen.setIcon(person); //set nineteenth to person
                    break;//break
            }
        }
        catch (NullPointerException e) { //ensure no nullpointer errors pop up
            status.setText("Game not on"); //output game not started
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_displayActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //this help button outputs advice that if bolders are on the same level as you, you can over ride them as they will not fall on you
        helpBox.setText("Once bolders are beside you,"); 
        helpBox2.setText("You can override them.");
    }//GEN-LAST:event_jButton1ActionPerformed
    public static void main(String args[]) throws UnsupportedAudioFileException, IOException, LineUnavailableException  { //main method, throw exceptions if filename for music not found
        JFrame frame = new JFrame("Appa Game"); //name the frame
        //Output pop up message explaining how it works 
        JOptionPane.showMessageDialog(frame,"Welcome to get APPA: How to play\nYou must protect Appa from the boulders by moving right or left\nSurvive 1 minute but beware the further you go, the more intense it will be\nGood luck.");
        ///create object panel
        appa panel = new appa();
        //set frame size
        frame.setSize(panel.getSize());
        //set dimensions to 700 by 700 pixels
        frame.setSize(new Dimension(750, 700));
        // set the frame content to the panel
        frame.setContentPane(panel);
        //make frame visible
        frame.setVisible(true);
        //exit program upon close
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //play music, this music code is inspired by Bro Code on Youtube
        File file = new File("mountain.wav");  //set file object to take filename value
        AudioInputStream audioStream = AudioSystem.getAudioInputStream(file); //get audio stream of file
        Clip clip = AudioSystem.getClip(); //Clip the Audio System
        clip.open(audioStream); //Open the audio stream
        clip.start(); //start/play the clip/music
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField display;
    private javax.swing.JButton eight;
    private javax.swing.JButton eightteen;
    private javax.swing.JButton eleven;
    private javax.swing.JButton fifteen;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton fourteen;
    private javax.swing.JLabel helpBox;
    private javax.swing.JLabel helpBox2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel milisecond;
    private javax.swing.JLabel minute;
    private javax.swing.JButton nine;
    private javax.swing.JButton nineteen;
    private javax.swing.JButton one;
    private javax.swing.JLabel second;
    private javax.swing.JButton seven;
    private javax.swing.JButton seventeen;
    private javax.swing.JButton six;
    private javax.swing.JButton sixteen;
    private javax.swing.JTextField status;
    private javax.swing.JButton ten;
    private javax.swing.JButton thirteen;
    private javax.swing.JButton three;
    private javax.swing.JButton tweleve;
    private javax.swing.JButton twenty;
    private javax.swing.JButton two;
    // End of variables declaration//GEN-END:variables
}
